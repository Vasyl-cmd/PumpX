import ccxt
import time
import logging
import pandas as pd
import requests
from datetime import datetime, timedelta, timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –±–µ–∑ API-–∫–ª—é—á–µ–π
bybit = ccxt.bybit({'options': {'defaultType': 'future'}})

# –¢–µ–ª–µ–≥—Ä–∞–º API
TELEGRAM_BOT_TOKEN = "7913216420:AAHvkdJB9Gx7wktl5DFkGrvvlhBsz8rdTNU"
TELEGRAM_CHAT_ID = "359242722"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
timeframe_minutes = 20  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
percent_threshold = 5  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–º–ø–∞/–¥–∞–º–ø–∞

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ 24 —á–∞—Å–∞
signal_counts = {}
last_reset_time = datetime.now(timezone.utc)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
    
    try:
        response = requests.post(url, data=data)
        if response.status_code == 200:
            logging.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.text}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞
startup_message = (
    f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∞–º–ø—ã/–¥–∞–º–ø—ã!\n"
    f"‚è±Ô∏è –í—Ä–µ–º—è: {timeframe_minutes} –º–∏–Ω—É—Ç\n"
    f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç: {percent_threshold}%"
)
send_telegram_message(startup_message)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä —Å Bybit
def get_futures_symbols():
    all_coins = []

    try:
        bybit_markets = bybit.load_markets()

        bybit_coins = [
            (symbol.replace('/', '').split(':')[0], 'Bybit')  # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –∏ –≤—Å—ë –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
            for symbol, data in bybit_markets.items()
            if symbol.endswith('USDT')  
            and data.get('active', False)  
            and 'swap' in data.get('type', '')  
        ]

        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bybit_coins)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä —Å Bybit.")
        all_coins.extend(bybit_coins)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Bybit: {e}")

    return all_coins

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º–ø–∞/–¥–∞–º–ø–∞
def check_pump_dump(symbol, exchange_name):
    global last_reset_time, signal_counts

    try:
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        if datetime.now(timezone.utc) - last_reset_time > timedelta(hours=24):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
            signal_counts.clear()
            last_reset_time = datetime.now(timezone.utc)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
            logging.info("üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ 24 —á–∞—Å–∞.")

        ohlcv = bybit.fetch_ohlcv(symbol, timeframe='1m', limit=21)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

        if len(df) < 21:
            logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({exchange_name})")
            return

        first_price = df.iloc[-21]['close']
        last_price = df.iloc[-1]['close']
        percent_change = ((last_price - first_price) / first_price) * 100

        logging.info(f"üìä {symbol} ({exchange_name}): {percent_change:.2f}% –∑–∞ {timeframe_minutes} –º–∏–Ω—É—Ç")

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã
        signal_counts[symbol] = signal_counts.get(symbol, 0) + 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ CoinGlass
        coinglass_url = f"https://www.coinglass.com/tv/Bybit_{symbol.replace('USDT', 'USDT')}"

        if percent_change >= percent_threshold:
            message = (
                f"üöÄ <b><a href='{coinglass_url}'>{symbol} ({exchange_name})</a></b> <b>–ü–∞–º–ø: {percent_change:.2f}%</b>\n"
                f"üïí {timeframe_minutes} –º–∏–Ω—É—Ç ( {first_price:.4f} ‚Üí {last_price:.4f} )\n"
                f"üì¢ Signal 24h: {signal_counts[symbol]}"
            )
            send_telegram_message(message)
        elif percent_change <= -percent_threshold:
            message = (
                f"üîª <b><a href='{coinglass_url}'>{symbol} ({exchange_name})</a></b> <b>–î–∞–º–ø: {percent_change:.2f}%</b>\n"
 f"üïí {timeframe_minutes} –º–∏–Ω—É—Ç ( {first_price:.4f} ‚Üí {last_price:.4f} )\n"
                f"üì¢ Signal 24h: {signal_counts[symbol]}"
            )
            send_telegram_message(message)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol} ({exchange_name}): {e}")

# –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
try:
    while True:
        futures_pairs = get_futures_symbols()
        logging.info(f"üì¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(futures_pairs)} –ø–∞—Ä")

        for symbol, exchange_name in futures_pairs:
            check_pump_dump(symbol, exchange_name)

        time.sleep(60)  # –ü–∞—É–∑–∞ –≤ 60 —Å–µ–∫—É–Ω–¥

except KeyboardInterrupt:
    logging.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    send_telegram_message("‚ùå –ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")  # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")  # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –æ—à–∏–±–∫–µ