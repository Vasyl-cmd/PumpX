import ccxt
import time
import logging
import pandas as pd
import requests
from datetime import datetime, timezone, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –±–µ–∑ API-–∫–ª—é—á–µ–π
bybit = ccxt.bybit({'options': {'defaultType': 'future'}})

# –¢–µ–ª–µ–≥—Ä–∞–º API
TELEGRAM_BOT_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
TELEGRAM_CHAT_ID = "–¢–í–û–ô_–ß–ê–¢_ID"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
timeframe_minutes = 20  # –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
percent_threshold = 2  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
pump_block_time = timedelta(minutes=15)  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞–º–ø–∞/–¥–∞–º–ø–∞ –ø–æ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç–µ
last_signal_time = {}

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
    
    try:
        response = requests.post(url, data=data)
        if response.status_code == 200:
            logging.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.text}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
startup_message = (
    f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∞–º–ø—ã/–¥–∞–º–ø—ã!\n"
    f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {timeframe_minutes} –º–∏–Ω—É—Ç\n"
    f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: {percent_threshold}%"
)
send_telegram_message(startup_message)

def get_futures_symbols():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä —Å Bybit"""
    all_coins = []

    try:
        bybit_markets = bybit.load_markets()

        bybit_coins = [
            (symbol.replace('/', '').split(':')[0], 'Bybit')  
            for symbol, data in bybit_markets.items()
            if symbol.endswith('USDT') and data.get('active', False) and 'swap' in data.get('type', '')  
        ]

        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bybit_coins)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä —Å Bybit.")
        all_coins.extend(bybit_coins)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Bybit: {e}")

    return all_coins

def check_pump_dump(symbol, exchange_name):
    """–ê–Ω–∞–ª–∏–∑ –ø–∞–º–ø–∞/–¥–∞–º–ø–∞"""
    try:
        now = datetime.now(timezone.utc)
        ohlcv = bybit.fetch_ohlcv(symbol, timeframe='1m', limit=21)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

        if len(df) < 21:
            logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({exchange_name})")
            return

        first_price = df.iloc[-21]['close']
        last_price = df.iloc[-1]['close']
        percent_change = ((last_price - first_price) / first_price) * 100

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∏–Ω—É—Ç
        volume_first = df.iloc[-21:-1]['volume'].sum()
        volume_last = df.iloc[-20:]['volume'].sum()

        if volume_first == 0:
            volume_ratio = 0  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        else:
            volume_ratio = volume_last / volume_first

        logging.info(f"üìä {symbol} ({exchange_name}): {percent_change:.2f}% –∑–∞ {timeframe_minutes} –º–∏–Ω—É—Ç")
        logging.info(f"üìä {symbol} ({exchange_name}): –æ–±—ä–µ–º –≤—ã—Ä–æ—Å –≤ {volume_ratio:.2f} —Ä–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∏–Ω—É—Ç")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        if symbol in last_signal_time and now - last_signal_time[symbol] < pump_block_time:
            logging.info(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol} (–µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 15 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞)")
            return  

        # –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞
        last_signal_time[symbol] = now  

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ CoinGlass
        coinglass_url = f"https://www.coinglass.com/tv/Bybit_{symbol.replace('USDT', 'USDT')}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        first_price_formatted = f"{first_price:.6f}".rstrip('0').rstrip('.')
        last_price_formatted = f"{last_price:.6f}".rstrip('0').rstrip('.')

        # –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        if percent_change >= percent_threshold:
            message = (
                f"üöÄ <b><a href='{coinglass_url}'>{symbol} ({exchange_name})</a></b> <b>–ü–∞–º–ø: {percent_change:.2f}%</b>\n"
                f"üïí {timeframe_minutes} –º–∏–Ω—É—Ç ( {first_price_formatted} ‚Üí {last_price_formatted} )\n"
                f"üìä –û–±—ä–µ–º –≤—ã—Ä–æ—Å –≤ {volume_ratio:.2f} —Ä–∞–∑"
            )
            send_telegram_message(message)

        elif percent_change <= -percent_threshold:
            message = (
                f"üîª <b><a href='{coinglass_url}'>{symbol} ({exchange_name})</a></b> <b>–î–∞–º–ø: {percent_change:.2f}%</b>\n"
                f"üïí {timeframe_minutes} –º–∏–Ω—É—Ç ( {first_price_formatted} ‚Üí {last_price_formatted} )\n"
                f"üìä –û–±—ä–µ–º –≤—ã—Ä–æ—Å –≤ {volume_ratio:.2f} —Ä–∞–∑"
            )
            send_telegram_message(message)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol} ({exchange_name}): {e}")

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
try:
    while True:
        now = datetime.now(timezone.utc)

        futures_pairs = get_futures_symbols()
        logging.info(f"üì¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(futures_pairs)} –ø–∞—Ä")

        for symbol, exchange_name in futures_pairs:
            check_pump_dump(symbol, exchange_name)

        time.sleep(60)  # –ü–∞—É–∑–∞ –≤ 60 —Å–µ–∫—É–Ω–¥

except KeyboardInterrupt:
    logging.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    send_telegram_message("‚ùå –ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")